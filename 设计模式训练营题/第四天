1.单例模式的双重检查锁为何要做2次非空检测？
原因1.先判断是否为空，可以降低synchronization块的执行次数
    2.可以避免对象的重复创建
    3.从设计的角度讲，运用了缓存机制，大大提高了双重检查锁模式创建对象的效率
2.单例模式双重检查锁中的Synchronized为什么锁住的是class，可以是int或者object吗？
原因：使用class锁住的是代码块，是全局共享锁的





1：单例模式的双重检查锁为何要做2次非空检测？
* 一句话：避免多线程访问时单例对象的重复创建。
* 设计视角：我们在设计代码时，首先要保证代码的质量(安全)问题，其次要让代码的处理性能最优，因此我们会把单例模式设计为懒汉式，但同时我们就要解决因此带来的线程安全问题，单例安全问题的本质在于单例被破坏，因此我们会使用锁来保证同步，但是锁又影响了性能，所以我们考虑使用双重检查，在中间加锁，以此来保证锁的粒度最小，同时性能最优。
* 详细描述：> 加了锁能保证安全，但是就会导致性能问题，并且锁的粒度越大，性能影响越大，因此，在java中要尽量减小锁粒度。
> 核心代码：
if (instance == null) { //第一层null判断
synchronized(Singleton.class) {
if (instance == null) { //第二次null判断
instance = new Singleton();
}
}
}
> 第一层null判断比较好理解，在单例对象创建之后，之后再访问单例时，直接就返回单例对象，不会进入加锁代码块，因此第一次null判断本质上是一个优化判断。
> 为什么要进行第二次的null判断？当线程1获得对象锁之后，会去创建单例对象，在跳出方法体之后会释放对象锁，此时线程2获得锁，如果不进行第二次判断，线程2就会重新创建单例对象，并把单例引用指针指向新创建的对象。

2：单例模式双重检查锁中的Synchronized为什么锁住的是class，可以是int或者Object吗？
* 一句话：单例的静态方法入口作为类方法要使用的锁一定是全局共享锁。
* 详细：获取单例对象的入口方法为静态方法，也就是类方法，因此我们要保证锁的全局性，而最好的全局锁就是单例类本身的类对象的锁。如果使用全局的同一个单例Object作为锁也是可以的，但是我们同时就又要保证Object的单例，这样就不符合最少知道原则，也完全没有必要这么做；int也是不可以的，因为int是基本数据类型，不属于引用类型，是不能作为锁的，因为锁信息是存在于JVM中的对象头中信息中的，而作为int的包装类Integer，也是不能作为锁的，我们可以看jdk中Integer的源码：
public static Integer valueOf(int i) {
if (i >= IntegerCache.low && i <= IntegerCache.high)
return IntegerCache.cache[i + (-IntegerCache.low)];
return new Integer(i);
}
我们看到Integer其实是有一个数据缓存区(-128~127), 在缓存区外的Integer对象，每次都是new的对象，因此Integer是不能作为锁的，不只是在单例的这个地方不能，在所有用到锁的地方，我们都要避免使用基本类型的包装类作为锁






