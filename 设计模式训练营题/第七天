1，实现代理模式的底层逻辑是什么？
(1)拿到被代理对象的引用，通过反射获取它的所有接口
(2）jdk的动态代理生成一个新类，这个新类要实现被代理对象的所有实现的接口
(3)动态生成Java 代码，把新加的方法由代码去调用，编译新生成的Java代码。
(4)重新加载到JVM 中运行。
2，为何jdk动态代理一定要求被代理类实现接口，而cglib不需要？
（1）能通过反射机制拿到被代理对象的引用
（2）cglib是通过继承来实现代理的，通过继承可以直接拿到被代理对象的引用






1，实现代理模式的底层逻辑是什么？

答：本质上是使用一个新类来持有被代理类的引用。
然后在调用被代理类方法之前或之后添加额外代码。
新类手工写，我们叫简单代理，新类自动生成，我们
叫动态代理。

2，为何jdk动态代理一定要求被代理类实现接口，而
cglib不需要？

答：首先，我们需要新类来持有被代理类引用(这样才
能实现代理)，并保持和代理类一样的类型(这样才能
保证使用代理类与使用被代理类入口一样)。怎么做到
这一点呢？我们很快想到让代理类和被代理类拥有共同
接口，或者让被代理类作为代理类的子类。于是，前者
是jdk动态代理的思路，后者是cglib代理的思路。接下
来我们简单分析下这二者。

jdk动态代理：
首先我们的代理类需要实现InvocationHandler接口以获得
回调入口。对于传入的任意对象，我们依据其接口动态生
成新类，并在接口的实现方法里，调用被代理类的回调函数。
这样，对于任意被代理类，我们的代理类总是能依据其接口
生成的新类，调用到回调函数。这也解释了为何jdk动态代理
一定要实现接口。很明显：不实现接口，就无法以这种方式
动态生成代理类，动态代理就无从谈起了。并且，我们不但要
求它要实现接口，而且它只能代理接口定义的方法！

cglib代理：
jdk动态代理很方便，但它要求“一定实现接口”的局限性迫使人们
思考：有更简洁的方式吗？于是基于上述第二种思路，通过继承
方式实现动态代理的方案诞生了，它就是cglib代理。我们来看一段
模板代码：
Enhancer enhancer=new Enhancer();
enhancer.setSuperclass(target);
enhancer.setCallback(this);
return enhancer.create();
设置父类为被代理类，设置回调为当前类。我们动态生成的代理类继承自
被代理类。然后创建新类的实例，使用上述设置的回调对象“this”找到被
代理类的回调入口。其中具体的过程，使用复杂的字节码生成技术实现。
其中细节我不太清楚，期待大神答疑。这种代理方式不必要求被代理类实现
接口。但由于使用了继承，所以无法继承的类（比如final修饰的），是无法
通过这种方式代理的。

总的来看，cglib代理比jdk动态代理优雅的多，限制也小很多。那么，为什
么它没有替代jdk动态代理呢？很大的原因是，这种方式比较复杂，生成的临时
类比较多（3个），而jdk动态代理只有1个，所以其开销比jdk动态代理大。通
常，我们被代理类如果实现了接口就使用jdk动态代理，否则使用cglib代理。