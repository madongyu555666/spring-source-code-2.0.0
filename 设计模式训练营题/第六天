1.工厂类需要私有化构造方法吗？
（1）站在设计者的角度：在单例模式下，工厂类需要私有化的构造方法，这样在单例模式下就只有一个对外的入口。而在抽象工厂模式下，构造方法就不能私有化
（2）站在使用者的角度：工厂类不需要私有化的构造方法，可以自己new工厂，方便自己使用
2.如何用最精简的语句描述产品等级结构和产品族？
产品等级结构：产品的继承结构。例如：抽象类是汽车的话，子类可以是奔驰，丰田等，这样就构成了产品等级结构
产品族：同一个工厂生产的系列产品。例如：大众的汽车，卡车等，构成了产品族








1：工厂类需要私有化构造方法吗？
>要根据不同的情况来考虑是否有必要私有化构造方法，首先我们说下如果一个类私有化了构造方法后会如何：构造方法私有化之后，这个类不能通过new来获得实例，因此私有化构造方法的本质是强化了类不可实例化的能力。
>对于单例模式，获得单例对象的入口为getInstance()方法，从这个层面上来说，有点工厂方法的影子，而这个类的构造方法是一定要私有化的，目的是为了单例对象的唯一，同时也限定了单例对象的获得只有这一个入口。
>对于工厂类，我们使用的静态工厂调用的是类的静态方法，如public static Oject getInstance(...)，我们也不会去创建静态工厂类的实例，而对于抽象工厂方法，我们需要首先创建工厂的实例，这时候工厂类的构造方法是一定不能私有化的。
因此，工厂类的构造方法要不要私有化，主要的判断依据为在业务层面这个工厂类要不要保证单例，比如需要强制保持单例的单例工厂类一定要私有化构造方法，比如需要创建工厂对象的抽象工厂方法是一定不能私有化构造方法的。
>设计层面：私有化构造方法后类不可通过new来实例化，因此私有构造方法主要目的是为了单例。

2：如何用最精简的语句描述产品结构和产品族？
*最精简：基本的产品单元（基础类Pojo）通过聚合（产品结构）成为产品族（Factory），不同的产品族再次抽象出共性的族定义（抽象工厂）；
>族即为族群，家族，民族，产品族，可以统一定义为一种抽象聚合体，族内包含了本族各类对象，比如汉族，回族，壮族；结构即为某种抽象体的聚合方式，比如我们中国的每个民族都是由学生，工人，公务员等不同的人员结构所组成。
>例子：中国人民共和国这个大家庭下，我们有56个民族，这个民族是一个抽象聚合体，我们可以称之为是一个工厂，每个民族都是由不同的人员体系所构成，也即每个族都有各自的人员组成体系(产品结构)。