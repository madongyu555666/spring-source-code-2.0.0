1：java什么时候用重载，什么时候用重写？
简单总结：
重载是多样性，重写是增强剂；
目的是提高程序的多样性和健壮性，以适配不同场景使用时，使用重载进行扩展；
目的是在不修改原方法及源代码的基础上对方法进行扩展或增强时，使用重写；
生活例子：
你想吃一碗面，我给你提供了拉面，炒面，刀削面，担担面供你选择，这是重载；
你想吃一碗面，我不但给你端来了面，还给你加了青菜，加了鸡蛋，这个是重写；
设计模式：
cglib实现动态代理，核心原理用的就是方法的重写；
详细解答：
1.1> java的重载(overload) 最重要的应用场景就是构造器的重载，构造器重载后，提供多种形参形式的构造器，可以应对不同的业务需求，加强程序的健壮性和可扩展性，比如我们最近学习的Spring源码中的ClassPathXmlApplicationContext，它的构造函数使用重载一共提供了10个构造函数，这样就为业务的选择提供了多选择性。在应用到方法中时，主要是为了增强方法的健壮性和可扩展性，比如我们在开发中常用的各种工具类，比如我目前工作中的短信工具类SMSUtil, 发短信的方法就会使用重载，针对不同业务场景下的不同形参，提供短信发送方法，这样提高了工具类的扩展性和健壮性。
总结：重载必须要修改方法(构造器)的形参列表，可以修改方法的返回值类型，也可以修改方法的异常信息即访问权限；使用范围是在同一个类中，目的是对方法(构造器)进行功能扩展，以应对多业务场景的不同使用需求。提高程序的健壮性和扩展性。
1.2> java的重写(override) 只要用于子类对父类方法的扩展或修改，但是在我们开发中，为了避免程序混乱，重写一般都是为了方法的扩展，比如在cglib方式实现的动态代理中，代理类就是继承了目标类，对目标类的方法进行重写，同时在方法前后进行切面织入。
总结：方法重写时，参数列表，返回值得类型是一定不能修改的，异常可以减少或者删除，但是不能抛出新的异常或者更广的异常，方法的访问权限可以降低限制，但是不能做更严格的限制。

2：举例一个更倾向于使用抽象类，而不是使用接口的设计场景；
接口是一种定义，抽象类是一种抽象的实现，比较典型的使用就是模板方法：
在使用模板方法定义某种操作流程时，更倾向于使用抽象类，比如JDBCTemplate，
举例：获取第三方数据，在一个项目中我们要获取芝麻分，法院信用报告，运营商报告，我们会使用一个抽象类来定义整个流程，1:参数设置，2:数据获取，3:结果解析, 4:结果存储，5:日志记录；
在这个场景里面，比较适合使用抽象类来定义整体的业务流程，具体的数据获取和解析过程交给子类去实现，这是个典型的模板方法模式。使用抽象类，可以定义关键步骤并且指定执行流程。而如果使用接口，则并不适合。