spring源码IOC步骤说明

   /**
	 * 1.入口ClassPathXmlApplicationContext()调用构造函数
	 * 2.调用super(parent)来把参数ApplicationContext（应用程序上下文）设置到PathMatchingResourcePatternResolver的属性resourceLoader上（设置资源加载器）
	 * 3.调用setConfigLocations(configLocations);解析Bean定义资源文件的路径，处理多个资源文件字符串数组，在类PropertyPlaceholderHelper的parseStringValue中取具体的去处理资源文件的路径
	 * 4.执行refresh()方法，该方法中定义了IOC容器初始化的方法，其中载入资源文件的是obtainFreshBeanFactory方法
	 * 5.obtainFreshBeanFactory方法中使用了委派设计模式，父类定义了抽象的refreshBeanFactory()方法，具体实现调用子类容器的refreshBeanFactory()方法
	 * 6.找到obtainFreshBeanFactory方法的子类实现AbstractRefreshableApplicationContext的refreshBeanFactory方法，该方法中先是判断是否有容器,如果已经有容器，销毁容器中的bean，关闭容器，该方法中主要做了，以下操作
	 *  （1）创建IOC容器
	 *  （2）对IOC容器进行定制化，如设置启动参数，开启注解的自动装配等
	 *  （3）调用载入Bean定义的方法，主要这里又使用了一个委派模式，在当前类中只定义了抽象的loadBeanDefinitions方法，具体的实现调用子类容器
	 * 7.调用loadBeanDefinitions方法的子类实现AbstractXmlApplicationContext的loadBeanDefinitions方法，该方法实现父类抽象的载入Bean定义方法，主要做了一下操作：
	 * （1）创建XmlBeanDefinitionReader，即创建Bean读取器，并通过回调设置到容器中去，容  器使用该读取器读取Bean定义资源
	 * （2）为Bean读取器设置Spring资源加载器，AbstractXmlApplicationContext的
	 * 		祖先父类AbstractApplicationContext继承DefaultResourceLoader，因此，容器本身也是一个资源加载器
	 * （3）为Bean读取器设置SAX xml解析器
	 * （4）当Bean读取器读取Bean定义的Xml资源文件时，启用Xml的校验机制
	 * 该方法Bean读取器真正实现加载的方法是loadBeanDefinitions(beanDefinitionReader);并把读取器传递进去
	 * 8.loadBeanDefinitions方法主要是Bean读取器加载Bean定义资源，还做了如下操作
	 * （1）获取Bean定义资源的定位，如果不为空，则Bean读取器调用其父类AbstractBeanDefinitionReader读取定位的Bean定义资源。
	 * 	如果子类中获取的Bean定义资源定位为空，则获取FileSystemXmlApplicationContext构造方法中setConfigLocations方法设置的资源，Bean读取器调用其父类AbstractBeanDefinitionReader读取定位的Bean定义资源
	 * 9.调用XmlBeanDefinitionReader类的loadBeanDefinitions方法，该方法是BeanDefinitionReader加载资源的入口方法，将读入的XML资源进行特殊编码处理
	 * （1）将资源文件转为InputStream的IO流
	 * （2）从InputStream中得到XML的解析源
	 * （3）doLoadBeanDefinitions是具体的读取过程
	 * 10.XmlBeanDefinitionReader类的doLoadBeanDefinitions方法是从特定XML文件中实际载入Bean定义资源的方法，该方法做了如下操作
	 * （1）将XML文件转换为DOM对象，解析过程由documentLoader实现
	 * （2）启动对Bean定义解析的详细过程，该解析过程会用到Spring的Bean配置规则------registerBeanDefinitions(doc, resource);
	 * 11.在registerBeanDefinitions方法中按照Spring的Bean语义要求将Bean定义资源解析并转换为容器内部数据结构，主要如下操作
	 * （1）得到BeanDefinitionDocumentReader来对xml格式的BeanDefinition解析
	 * （2）获得容器中注册的Bean数量
	 * （3）解析过程入口，这里使用了委派模式，BeanDefinitionDocumentReader只是个接口,具体的解析实现过程有实现类DefaultBeanDefinitionDocumentReader完成
	 * （4）统计解析的Bean数量
	 * 12.在类DefaultBeanDefinitionDocumentReader的registerBeanDefinitions方法中根据Spring DTD对Bean的定义规则解析Bean定义Document对象
	 * （1）获得XML描述符
	 * （2）获得Document的根元素
	 * 13.在类DefaultBeanDefinitionDocumentReader的doRegisterBeanDefinitions方法中给定的根<beans/>元素中注册每个bean定义
	 * （1）具体的解析过程由BeanDefinitionParserDelegate实现，BeanDefinitionParserDelegate中定义了Spring Bean定义XML文件的各种元素
	 * （2）在解析Bean定义之前，进行自定义的解析，增强解析过程的可扩展性
	 * （3）从Document的根元素开始进行Bean定义的Document对象
	 * （4）在解析Bean定义之后，进行自定义的解析，增加解析过程的可扩展性
	 * 14.查询parseBeanDefinitions方法，该方法使用Spring的Bean规则从Document的根元素开始进行Bean定义的Document对象
	 * （1）Bean定义的Document对象使用了Spring默认的XML命名空间
	 * （2）获取Bean定义的Document对象根元素的所有子节点
	 * （3）获得Document节点是XML元素节点
	 * （4）Bean定义的Document的元素节点使用的是Spring默认的XML命名空间
	 * （5)使用Spring的Bean规则解析元素节点
	 * （6）没有使用Spring默认的XML命名空间，则使用用户自定义的解//析规则解析元素节点
	 * （7）Document的根节点没有使用Spring默认的命名空间，则使用用户自定义的
	 * 			解析规则解析Document根节点
	 * 			delegate.parseCustomElement(root);
	 * 15.查看parseDefaultElement方法中使用Spring的Bean规则解析Document元素节点（DefaultBeanDefinitionDocumentReader）
	 * （1）如果元素节点是<Import>导入元素，进行导入解析
	 * （2）如果元素节点是<Alias>别名元素，进行别名解析
	 * （3）元素节点既不是导入元素，也不是别名元素，即普通的<Bean>元素，按照Spring的Bean规则解析元素
	 * 16.调用processBeanDefinition，普通的bean元素，解析Bean定义资源Document对象的普通元素
	 * （1）BeanDefinitionHolder是对BeanDefinition的封装，即Bean定义的封装类
	 * （2）对Document对象中<Bean>元素的解析由BeanDefinitionParserDelegate实现
	 * （3）向Spring IOC容器注册解析得到的Bean定义，这是Bean定义向IOC容器注册的入口	BeanDefinitionReaderUtils.registerBeanDefinition(bdHolder, getReaderContext().getRegistry());
	 * （4）在完成向Spring IOC容器注册解析得到的Bean定义之后，发送注册事件，getReaderContext().fireComponentRegistered(new BeanComponentDefinition(bdHolder));
	 * 17.BeanDefinitionParserDelegate类中的parseBeanDefinitionElement方法是解析<Bean>元素的入口，/解析Bean定义资源文件中的<Bean>元素，这个方法中主要处理<Bean>元素的id，name和别名属性
	 * （1）获取<Bean>元素中的id属性值
	 * （2）获取<Bean>元素中的name属性值
	 * （3）获取<Bean>元素中的alias属性值
	 * （4）将<Bean>元素中的所有name属性值存放到别名中
	 * （5）如果<Bean>元素中没有配置id属性时，将别名中的第一个值赋值给beanName
	 * （6）检查<Bean>元素所配置的id或者name的唯一性，containingBean标识<Bean>
	 * （7）元素中是否包含子<Bean>元素
	 * （8）检查<Bean>元素所配置的id、name或者别名是否重复
	 * （9）详细对<Bean>元素中配置的Bean定义进行解析
	 * （10）如果<Bean>元素中没有配置id、别名或者name，且没有包含子元素
	 * （11）<Bean>元素，为解析的Bean生成一个唯一beanName并注册
	 * （12）如果<Bean>元素中没有配置id、别名或者name，且包含了子元素<Bean>元素，为解析的Bean使用别名向IOC容器注册
	 * （13）为解析的Bean使用别名注册时，为了向后兼容Spring1.2/2.0，给别名添加类名后缀
	 * （14）当解析出错时，返回null
	 * 返回BeanDefinitionHolder是Element的包装类
	 * 18.调用BeanDefinitionReaderUtils类的registerBeanDefinition方法，该方法将解析的BeanDefinitionHold注册到容器中
	 * （1）获取解析的BeanDefinition的名称
	 * （2）向IOC容器注册BeanDefinition 	registry.registerBeanDefinition(beanName, definitionHolder.getBeanDefinition());
	 * （3）如果解析的BeanDefinition有别名，向容器为其注册别名
	 * 19.调用DefaultListableBeanFactory类的registerBeanDefinition方法是向IOC容器注册解析的BeanDefiniton
	 * （1）校验解析的BeanDefiniton
	 * （2）注册的过程中需要线程同步，以保证数据的一致性
	 * （3）检查是否有同名的BeanDefinition已经在IOC容器中注册
	 * （4）重置所有已经注册过的BeanDefinition的缓存
	 * 使用该map存储信息，存储注册信息的BeanDefinition
	 * 	private final Map<String, BeanDefinition> beanDefinitionMap = new ConcurrentHashMap<>(256);
	 */