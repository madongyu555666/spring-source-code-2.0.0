/**
	 * 1.以BeanFactory的getBean()方法为入口，来分析Spring的ID源码，找到BeanFactory的实现类AbstractBeanFactory的geiBean()方法
	 * 该方法是获取IOC容器中指定名称的Bean，doGetBean才是真正向IoC容器获取被管理Bean的过程。
	 * 2.doGetBean是真正实现向IOC容器获取Bean的功能，也是触发依赖注入功能的地方，该方法大概步骤如下
	 * （1）根据指定的名称获取被管理Bean的名称，剥离指定名称中对容器的相关依赖
	 * （2）如果指定的是别名，将别名转换为规范的Bean名称
	 * （3）先从缓存中取是否已经有被创建过的单态类型的Bean
	 * （4）对于单例模式的Bean整个IOC容器中只创建一次，不需要重复创建
	 * （5）IOC容器创建单例模式Bean实例对象
	 *      1、如果指定名称的Bean在容器中已有单例模式的Bean被创建直接返回已经创建的Bean
	 *      2、获取给定Bean的实例对象，主要是完成FactoryBean的相关处理注意：BeanFactory是管理容器中Bean的工厂，而FactoryBean是创建创建对象的工厂Bean，两者之间有区别
	 * （6）缓存没有正在创建的单例模式，Bean缓存中已经有已经创建的原型模式Bean，但是由于循环引用的问题导致实例化对象失败
	 *      1、对IOC容器中是否存在指定名称的BeanDefinition进行检查，首先检查是否，能在当前的BeanFactory中获取的所需要的Bean，如果不能则委托当前容器，的父级容器去查找，如果还是找不到则沿着容器的继承体系向父级容器查找
	 *          1、当前容器的父级容器存在，且当前容器中不存在指定名称的Bean
	 *          2、解析指定Bean名称的原始名称
	 *          3、委派父级容器根据指定名称和显式的参数查找
	 *          4、委派父级容器根据指定名称和类型查找
	 *      2、创建的Bean是否需要进行类型验证，一般不需要，向容器标记指定的Bean已经被创建
	 *      3、根据指定Bean名称获取其父级的Bean定义，主要解决Bean继承时子类合并父类公共属性问题
	 *      4、获取当前Bean所有依赖Bean的名称
	 *      5、如果当前Bean有依赖Bean
	 *          1、递归调用getBean方法，获取当前Bean的依赖Bean
	 *          2、把被依赖Bean注册给当前依赖的Bean
	 *      6、创建单例模式Bean的实例对象
	 *          1、这里使用了一个匿名内部类，创建Bean实例对象，并且注册给所依赖的对象
	 *          2、创建一个指定Bean实例对象，如果有父级继承，则合并子类和父类的定义
	 *          3、显式地从容器单例模式Bean缓存中清除实例对象
	 *          4、获取给定Bean的实例对象
	 *      7、IOC容器创建原型模式Bean实例对象
	 *          1、原型模式(Prototype)是每次都会创建一个新的对象
	 *          2、回调beforePrototypeCreation方法，默认的功能是注册当前创建的原型对象
	 *          3、创建指定Bean对象实例
	 *          4、回调afterPrototypeCreation方法，默认的功能告诉IOC容器指定Bean的原型对象不再创建
	 *          5、获取给定Bean的实例对象
	 *      8、要创建的Bean既不是单例模式，也不是原型模式，则根据Bean定义资源中，配置的生命周期范围，选择实例化Bean的合适方法，这种在Web应用程序中，比较常用，如：request、session、application等生命周期
	 *          1、Bean定义资源中没有配置生命周期范围，则Bean定义不合法
	 *          2、这里又使用了一个匿名内部类，获取一个指定生命周期范围的实例
	 *          3、获取给定Bean的实例对象
	 *      9、对创建的Bean实例对象进行类型检查
	 *  该方法中createBean()方法是创建单例实例的bean对象。
	 *  3.AbstractAutowireCapableBeanFactory类中实现了createBean（）方法，该方法是创建Bean实例对象
	 *      （1）、判断需要创建的Bean是否可以实例化，即是否可以通过当前的类加载器加载
	 *      （2）、校验和准备Bean中的方法覆盖
	 *      （3）、如果Bean配置了初始化前和初始化后的处理器，则试图返回一个需要创建Bean的代理对象
	 *      （4）、创建Bean的入口
	 * 		Object beanInstance = doCreateBean(beanName, mbdToUse, args);
	 * 	4、doCreateBean（）方法是真正创建Bean的方法
	 * 	    （1）、封装被创建的Bean对象instanceWrapper = createBeanInstance(beanName, mbd, args);
	 * 	    （2）、获取实例化对象的类型
	 * 	    （3）、调用PostProcessor后置处理器
	 * 	    （4）、向容器中缓存单例模式的Bean对象，以防循环引用，这里是一个匿名内部类，为了防止循环引用，尽早持有对象的引用
	 * 	    （5)、Bean对象的初始化，依赖注入在此触发，这个exposedObject在初始化完成之后返回作为依赖注入完成后的Bean
	 * 	         1、将Bean实例对象封装，并且Bean定义中配置的属性值赋值给实例对象populateBean(beanName, mbd, instanceWrapper)
	 * 	         2、初始化Bean对象exposedObject = initializeBean(beanName, exposedObject, mbd);该方法中有AOP
	 * 	    (6)、获取指定名称的已注册的单例模式Bean对象
	 * 	         1、根据名称获取的已注册的Bean和正在实例化的Bean是同一个
	 * 	         2、当前实例化的Bean初始化完成
	 * 	         3、当前Bean依赖其他Bean，并且当发生循环引用时不允许新创建实例对象
	 * 	         4、获取当前Bean所依赖的其他Bean
	 * 	         5、对依赖Bean进行类型检查
	 * 	    (7)、注册完成依赖注入的Bean		registerDisposableBeanIfNecessary(beanName, bean, mbd);
	 * 在该方法中有俩个主要的操作  createBeanInstance， populateBean
	 * 下面来分析封装被创建的Bean对象的方法createBeanInstance
	 * 	5、进入到createBeanInstance（）方法中，是创建Bean的实例对象
	 * 	   （1）检查确认Bean是可实例化的
	 * 	   （2）使用工厂方法对Bean进行实例化
	 * 	   （3）调用工厂方法实例化
	 * 	   （4）使用容器的自动装配方法进行实例化，配置了自动装配属性，使用容器的自动装配实例化，容器的自动装配是根据参数类型匹配Bean的构造方法，使用默认的无参构造方法实例化
	 * 	   （5）使用Bean的构造方法进行实例化，使用容器的自动装配特性，调用匹配的构造方法实例化
	 * 	   （6）使用默认的无参构造方法实例化instantiateBean
	 * 	6、进入默认的无参构造方法instantiateBean（），该方法是使用默认的无参构造方法实例化Bean对象
	 * 	   （1）获取系统的安全管理接口，JDK标准的安全管理API，这里是一个匿名内置类，根据实例化策略创建实例对象，将实例化的对象封装起来
	 * 	7、进入到根据实例化策略来实例化的方法getInstantiationStrategy().instantiate(mbd, beanName, parent);进入到该方法的实现类SimpleInstantiationStrategy的instantiate方法
	 * 	该方法是使用初始化策略实例化Bean对象
	 * 	   （1）如果Bean定义中没有方法覆盖，则就不需要CGLIB父类类的方法
	 * 	          1、获取对象的构造方法或工厂方法
	 * 	          2、如果没有构造方法且没有工厂方法
	 * 	          3、使用JDK的反射机制，判断要实例化的Bean是否是接口，这里是一个匿名内置类，使用反射机制获取Bean的构造方法
	 * 	   （2）使用BeanUtils实例化，通过反射机制调用”构造方法.newInstance(arg)”来进行实例化
	 * 	   （3）使用CGLIB来实例化对象
	 * 	8、让我们回到AbstractAutowireCapableBeanFactory类的doCreateBean方法中，进入到populateBean方法中，该方法是将Bean属性设置到生成的实例对象上
	 * 	   （1）获取容器在解析Bean定义资源时为BeanDefiniton中设置的属性值
	 * 	   （2）对依赖注入处理，首先处理autowiring自动装配的依赖注入
	 * 	          1、根据Bean名称进行autowiring自动装配处理
	 * 	          2、根据Bean类型进行autowiring自动装配处理
	 * 	   （3）对非autowiring的属性进行依赖注入处理
	 * 	   （4）对属性进行注入applyPropertyValues(beanName, mbd, bw, pvs);
	 * 	9.进入到applyPropertyValues（）方法，该方法是解析并注入依赖属性的过程
	 * 	   （1）封装属性值
	 * 	   （2）设置安全上下文，JDK安全机制
	 * 	   （3）属性值已经转换，为实例化对象设置属性值，获取属性值对象的原始类型值
	 * 	   （4）获取用户自定义的类型转换
	 * 	   （5）创建一个Bean定义属性值解析器，将Bean定义中的属性值解析为Bean实例对象的实际值
	 * 	   （6）为属性的解析值创建一个拷贝，将拷贝的数据注入到实例对象中
	 * 	          1、属性值不需要转换
	 * 	          2、属性值需要转换
	 * 	              1、原始的属性值，即转换之前的属性值
	 * 	              2、转换属性值，例如将引用转换为IOC容器中实例化对象引用
	 * 	              3、转换之后的属性值
	 * 	              4、属性值是否可以转换
	 * 	              5、使用用户自定义的类型转换器转换属性值
	 * 	              6、存储转换后的属性值，避免每次属性注入时的转换工作
	 * 	              7、属性是可转换的，且属性原始值是字符串类型，且属性的原始类型值不是，动态生成的字符串，且属性的原始值不是集合或者数组类型，重新封装属性的值
	 * 	    （7）标记属性值已经转换过
	 * 	    （8）进行属性依赖注入bw.setPropertyValues(new MutablePropertyValues(deepCopy));
	 * 	10.进入到AbstractNestablePropertyAccessor类的setPropertyValue方法中，该方法是实现属性依赖注入功能，我们进入到processKeyedProperty(tokens, pv);方法中
	 * 	该processKeyedProperty（处理键属性）方法是实现属性依赖注入功能。
	 * 	    （1）调用属性的getter(readerMethod)方法，获取属性的值
	 * 	    （2）注入array类型的属性值
	 * 	        1、获取集合类型属性的长度
	 * 	        2、调用属性的getter(readerMethod)方法，获取属性的值
	 * 	        3、将属性的值赋值给数组中的元素
	 * 	    （3）注入list类型的属性值
	 * 	        1、获取list集合的类型
	 * 	        2、获取list集合的size
	 * 	        3、获取list解析后的属性值
	 * 	        4、如果list的长度大于属性值的长度，则多余的元素赋值为null
	 * 	        5、将值添加到list中
	 * 	    （4）注入map类型的属性值
	 * 	        1、获取map集合key的类型
	 * 	        2、获取map集合value的类型
	 * 	        3、解析map类型属性key值
	 * 	        4、解析map类型属性value值
	 * 	        5、将解析后的key和value值赋值给map集合属性
	 * 11.进入到processLocalProperty（处理本地属性）方法中，找到ph.setValue(valueToApply);进入到BeanWrapperImpl中，最后把依赖注入后的对象存到BeanWrapperImpl对象中
	 */